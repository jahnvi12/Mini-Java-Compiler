//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJDepthFirst<R, A> implements GJVisitor<R, A> {
	HashMap<String, Integer> mapExistingTemp = new HashMap<String, Integer>();
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	int tempC = 0;
	int nParams = 1;

	public R visit(NodeList n, A argu) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n, A argu) {
		if (n.present()) {
			R _ret = null;
			int _count = 0;
			LinkedList<R> list = new LinkedList<R>();
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				list.add(e.nextElement().accept(this, argu));
				_count++;
			}
			return (R) list;
		} else
			return null;
	}

	public R visit(NodeOptional n, A argu) {
		if (n.present())
			return n.node.accept(this, argu);
		else
			return null;
	}

	public R visit(NodeSequence n, A argu) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n, A argu) {
		return (R) n.tokenImage;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN" f1 -> StmtList() f2 -> "END" f3 -> ( Procedure() )* f4 -> <EOF>
	 */
	public R visit(Goal n, A argu) {
		R _ret = null;
		System.out.println("MAIN ");
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		System.out.println("END");
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public R visit(StmtList n, A argu) {
		R _ret = null;
		n.f0.accept(this, (A) new Boolean(true));
		return _ret;
	}

	/**
	 * f0 -> Label() f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> StmtExp()
	 */
	public R visit(Procedure n, A argu) {

		R _ret = null;
		String l = (String) n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		String val = (String) n.f2.accept(this, argu);
		tempC = Integer.parseInt(val);
		nParams = tempC;
		mapExistingTemp = new HashMap<String, Integer>();
		System.out.println(l + " [" + val + "]\nBEGIN");
		n.f3.accept(this, argu);
		_ret = n.f4.accept(this, argu);
		System.out.println("RETURN TEMP " + _ret);
		System.out.println("END");
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt() | ErrorStmt() | CJumpStmt() | JumpStmt() | HStoreStmt() |
	 * HLoadStmt() | MoveStmt() | PrintStmt()
	 */
	public R visit(Stmt n, A argu) {
		R _ret = null;
		argu = null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	public R visit(NoOpStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		System.out.println("NOOP");
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	public R visit(ErrorStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		System.out.println("ERROR");
		return _ret;
	}

	/**
	 * f0 -> "CJUMP" f1 -> Exp() f2 -> Label()
	 */
	public R visit(CJumpStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		_ret = n.f1.accept(this, argu);
		String l = (String) n.f2.accept(this, argu);
		System.out.println("CJUMP TEMP " + _ret + " " + l);
		return _ret;
	}

	/**
	 * f0 -> "JUMP" f1 -> Label()
	 */
	public R visit(JumpStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		_ret = n.f1.accept(this, argu);
		System.out.println("JUMP " + _ret);
		return _ret;
	}

	/**
	 * f0 -> "HSTORE" f1 -> Exp() f2 -> IntegerLiteral() f3 -> Exp()
	 */
	public R visit(HStoreStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		_ret = n.f1.accept(this, argu);
		String val = (String) n.f2.accept(this, argu);
		String t2 = (String) n.f3.accept(this, argu);
		if (n.f3.f0.which == 6) {
			System.out.println("MOVE TEMP " + (++tempC) + " " + t2);
			t2 = tempC + "";
		}
		System.out.print("HSTORE TEMP " + _ret + " " + val + " ");
		System.out.println("TEMP " + t2);
		return _ret;
	}

	/**
	 * f0 -> "HLOAD" f1 -> Temp() f2 -> Exp() f3 -> IntegerLiteral()
	 */
	public R visit(HLoadStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		String temp = (String) n.f1.accept(this, argu);
		_ret = n.f2.accept(this, argu);
		String val = (String) n.f3.accept(this, argu);
		System.out.println("HLOAD TEMP " + temp + " TEMP " + _ret + " " + val);
		return _ret;
	}

	/**
	 * f0 -> "MOVE" f1 -> Temp() f2 -> Exp()
	 */
	public R visit(MoveStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		String temp = (String) n.f1.accept(this, argu);
		_ret = n.f2.accept(this, argu);
		System.out.println("MOVE TEMP " + temp + " TEMP " + _ret);
		return _ret;
	}

	/**
	 * f0 -> "PRINT" f1 -> Exp()
	 */
	public R visit(PrintStmt n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		_ret = n.f1.accept(this, argu);
		System.out.println("PRINT TEMP " + _ret);
		return _ret;
	}

	/**
	 * f0 -> StmtExp() | Call() | HAllocate() | BinOp() | Temp() | IntegerLiteral()
	 * | Label()
	 */
	public R visit(Exp n, A argu) {
		R _ret = null;
		_ret = n.f0.accept(this, argu);
		if (n.f0.which == 5) {
			System.out.println("MOVE TEMP " + (++tempC) + " " + _ret);
			return (R) ("" + tempC);
		}
		return _ret;
	}

	/**
	 * f0 -> "BEGIN" f1 -> StmtList() f2 -> "RETURN" f3 -> Exp() f4 -> "END"
	 */
	public R visit(StmtExp n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		_ret = n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "CALL" f1 -> Exp() f2 -> "(" f3 -> ( Exp() )* f4 -> ")"
	 */
	public R visit(Call n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		String t1 = (String) n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		LinkedList<String> list = (LinkedList<String>) n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		System.out.print("MOVE TEMP " + (++tempC) + " CALL TEMP " + t1 + " ( ");
		for (String t2 : list) {
			System.out.print("TEMP " + t2 + " ");
		}
		System.out.println(")");
		return (R) ("" + tempC);
	}

	/**
	 * f0 -> "HALLOCATE" f1 -> Exp()
	 */
	public R visit(HAllocate n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		String t = (String) n.f1.accept(this, argu);
		System.out.println("MOVE TEMP " + (++tempC) + " HALLOCATE TEMP " + t);
		return (R) ("" + tempC);
	}

	/**
	 * f0 -> Operator() f1 -> Exp() f2 -> Exp()
	 */
	public R visit(BinOp n, A argu) {
		R _ret = null;
		String op = (String) n.f0.accept(this, argu);
		String t1 = (String) n.f1.accept(this, argu);
		String t2 = (String) n.f2.accept(this, argu);
		System.out.println("MOVE TEMP " + (++tempC) + " " + op + " TEMP " + t1 + " TEMP " + t2);
		return (R) ("" + tempC);
	}

	/**
	 * f0 -> "LE" | "NE" | "PLUS" | "MINUS" | "TIMES" | "DIV"
	 */
	public R visit(Operator n, A argu) {
		R _ret = null;
		_ret = n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "TEMP" f1 -> IntegerLiteral()
	 */
	public R visit(Temp n, A argu) {
		R _ret = null;
		n.f0.accept(this, argu);
		_ret = n.f1.accept(this, argu);
		if (Integer.parseInt(_ret + "") < nParams)
			return _ret;
		if (mapExistingTemp.containsKey(_ret))
			return (R) ("" + mapExistingTemp.get(_ret));
		mapExistingTemp.put((String) _ret, (++tempC));
		return (R) ("" + tempC);
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n, A argu) {
		R _ret = null;
		_ret = n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Label n, A argu) {
		R _ret = null;
		_ret = n.f0.accept(this, argu);
		if (argu != null)
			if ((Boolean) argu)
				System.out.print(_ret + " ");
		return _ret;
	}

}
